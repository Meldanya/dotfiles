
" Modeline {{
"	 vi: foldmarker={{,}} foldmethod=marker foldlevel=0: tabstop=4:
" }}

" General {{
	set nocompatible						" Don't be compatible with old Vim

	call pathogen#infect()					" Pathogen requirements

	filetype plugin indent on				" Enable file type specific stuff

	set undofile							" Use a file for undo
	set undodir=~/.vim/undo/				" Save undo in the .vim folder
	set undolevels=2048						" Number of undoes to save

	set completeopt=longest,menu			" Insert most common completion and show menu.

	set ttyfast								" Smoother scrolling

	set encoding=utf8						" Use Unicode inside Vim's registers, viminfo, buffers ...
	set fileencoding=utf8					" Use Unicode when saving files.

	set spelllang=en,sv
	set spell

	set nrformats=alpha,octal,hex			" What to increment/decrement with ^A and ^X"

	" No sound on errors
	set noerrorbells
	set novisualbell
	set t_vb=
	set tm=500

	set mouse=
	if has("mac")
		set clipboard=unnamed
	endif
" }}

" UI {{

	set foldenable					" Use folding

	set number						" Enable line numbers

	set showcmd						" Show partial command in status line
	set showmode					" Show current mode in the last line.
	set showmatch					" Shortly jump to a matching bracket when found a match.

	syntax enable					" Enable syntax highlighting
	set background=dark				" Set background to dark
	color solarized					" for Solarized theme

	set tabpagemax=32				" Set max limit of number of tabs

	set backspace=indent,eol,start	" Make backspace work like expected.

	set wildmenu					" Enable tab-completion menu.
	set wildmode=full				" Full completion.

	set scrolljump=5 				" Lines to scroll when cursor leaves screen.
	set scrolloff=3 				" Minimum lines to keep above and below cursor.

	set cursorline					" Highlight current line.

	let g:airline_powerline_fonts = 1
	set laststatus=2				" Always show statusline

	let g:limelight_conceal_ctermfg = 10 " Set the fade out color of Limelight to a gray one.
" }}

" Searching {{

	set hlsearch					" Highlight search.
	set incsearch					" Incremental search.
	set ignorecase					" Case insensitive search.
	set smartcase					" Smart case search.
	set splitbelow					" Open splits below the current window.

" }}

" Formatting {{
	" Whitespace and indent stuff
	set nowrap
	set smartindent
	set autoindent
	set tabstop=4
	set shiftwidth=4
	set softtabstop=4
	set noexpandtab
" }}

" Autocmd {{
	if has("autocmd")
		" reload vimrc when saving it
		autocmd bufwritepost .vimrc source ~/.vimrc

		autocmd FileType c setlocal softtabstop=8 tabstop=8 shiftwidth=8 noexpandtab colorcolumn=81
		autocmd FileType cpp setlocal softtabstop=4 tabstop=4 shiftwidth=4 noexpandtab colorcolumn=81
		autocmd Syntax cpp call EnhanceCppSyntax()

		" Set text width of Java files according to Google's coding style.
		autocmd FileType java setlocal colorcolumn=100 tw=100

		" wrap for markdown and text files
		autocmd BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} setlocal wrap wrapmargin=2 textwidth=72
		autocmd FileType txt setlocal expandtab wrap textwidth=78

		" Make Vim recognize json as JavaScript files
		autocmd BufNewFile,BufRead *.json set ft=javascript

		" make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
		autocmd FileType python setlocal expandtab softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

		" make uses real hard tabs or it will break so make sure it's set
		autocmd FileType make setlocal noexpandtab

		autocmd FileType tex,plaintex setlocal wrap wrapmargin=2 textwidth=70 spell formatoptions+=l expandtab

		autocmd FileType html setlocal expandtab softtabstop=4 tabstop=4 shiftwidth=4
		autocmd FileType javascript setlocal expandtab softtabstop=4 tabstop=4 shiftwidth=4

		autocmd FileType rfc setlocal wrap wrapmargin=2 textwidth=72 spell formatoptions+=l colorcolumn=73 softtabstop=3 tabstop=3 shiftwidth=3 expandtab

		autocmd FileType haskell setlocal tabstop=4 expandtab softtabstop=4 shiftwidth=4 smarttab shiftround nojoinspaces
		autocmd FileType lhaskell setlocal tabstop=4 expandtab softtabstop=4 shiftwidth=4 smarttab shiftround nojoinspaces colorcolumn=80 textwidth=80

		" Make Vim recognize .vimperatorrc and .pentadactylrc as vim config.
		autocmd BufRead,BufNewFile .vimperatorrc set ft=vim
		autocmd BufRead,BufNewFile .pentadactylrc set ft=vim

		autocmd BufRead,BufNewFile bash_aliases,bash_ps1,.bash_aliases,.bash_ps1 set ft=sh
	endif
" }}

" Plugins {{
	" NERDTree {{
		let g:NERDTreeQuitOnOpen=1			" Close tree after open.
	" }}

	" Solarized {{
		call togglebg#map("<F5>")
	" }}

	" Tagbar {{
		nmap <silent> <F3> :TagbarOpenAutoClose<CR>
	" }}

	" Sparkup {{
		" let g:sparkupExecuteMapping='<c-w>'
		" let g:sparkupNextMapping='<c-m>'
	" }}

	" Syntastic {{
		let g:syntastic_java_javac_classpath = '/Users/erik/Dropbox/lth/d4/edin01/project1/program'
		let g:syntastic_tex_checkers = ['chktex']
	" }}
" }}

" Mappings {{
	" Map leader to comma
	let mapleader=","

	" vmap
	vmap <C-j> gj
	vmap <C-k> gk
	vmap <C-4> g$
	vmap <C-6> g^
	vmap <C-0> g^
	nmap <C-j> gj
	nmap <C-k> gk
	nmap <C-4> g$
	nmap <C-6> g^
	nmap <C-0> g^

	" Map F2 to show and hide NerdTree
	map <F2> :NERDTreeToggle<CR>

	" inoremap and imap:
	" smart brackets
	inoremap {<CR>  {<CR>}<Esc>O

	" nmap:
	" Remap space.
	nmap <Space> :
	" Edit vimrc.
	nmap <leader>e :tabe $MYVIMRC<CR>
	" Map <F6> to toogle showing white space
	nmap <silent> <F6> :set list! listchars=tab:»·,eol:$,trail:·<CR>
	" Map Ctrl+/ to clear search highlight (stolen from https://github.com/erikw/dotfiles/blob/personal/.vimrc).
	nmap <silent> <C-_> :nohlsearch<CR>
	" Map F4 to search and replace /* Some text */ to // Some text
	nmap <F4> :%s/\/\*\(.*\)\*\//\/\/\1/gc<CR>
	" Map F8 to running ant install
	nmap <F8> :!ant launch<CR>

	" nnoremap:
	nnoremap <leader>g :GundoToggle<CR>
	" Map <Leader>c to toggle highlighting of the cursor line
	nnoremap <Leader>c :set cursorline!<CR>
	nnoremap <Leader>t :%s/\s\+$//g<CR>
	nnoremap <leader>a :Ack
	nnoremap <leader>p :set paste!<CR>
	nnoremap <leader>t4 :set noexpandtab tabstop=4 shiftwidth=4 softtabstop=4<CR>
	nnoremap <leader>t8 :set noexpandtab tabstop=8 shiftwidth=8 softtabstop=8<CR>
    " This rewires n and N to a highlighing function.
	nnoremap <silent> n   n:call HLNext(0.1)<cr>
	nnoremap <silent> N   N:call HLNext(0.1)<cr>

	" Strip trailing whitespace.
	nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

	" Reselect pasted text
	nnoremap <leader>v V`]

	" Toggle Goyo (distraction free mode).
	nnoremap <leader>V :Goyo<CR>

	" Enable writing to write protected files with :sudow.
	cnoremap sudow w !sudo tee % >/dev/null

	" Turn off arrow keys.
	map <up> <nop>
	map <down> <nop>
	map <left> <nop>
	map <right> <nop>
	imap <up> <nop>
	imap <down> <nop>
	imap <left> <nop>
	imap <right> <nop>
" }}

" Functions {{

" Add highlighting for function definition in C++
function! EnhanceCppSyntax()
	syn match cppFuncDef "::\~\?\zs\h\w*\ze([^)]*\()\s*\(const\)\?\)\?$"
	hi def link cppFuncDef Special
endfunction


" Highlight a search match in red...
function! HLNext (blinktime)
	let [bufnum, lnum, col, off] = getpos('.')
	let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
	let target_pat = '\c\%#'.@/
	let ring = matchadd('IncSearch', target_pat, 101)
	redraw
	exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
	call matchdelete(ring)
	redraw
endfunction

" Called when entering Goyo to customize stuff.
function! s:goyo_enter()
	silent !tmux set status off
	set scrolloff=999
	Limelight
	" Resize the Goyo window to the current textwidth.
	Goyo &textwidth
endfunction

" Called when exiting Goyo to reset stuff.
function! s:goyo_leave()
	set scrolloff=3
	silent !tmux set status on
	:AirlineToggle
	:AirlineToggle
	Limelight!
endfunction

autocmd! User GoyoEnter
autocmd! User GoyoLeave
autocmd  User GoyoEnter call <SID>goyo_enter()
autocmd  User GoyoLeave call <SID>goyo_leave()

" }}

